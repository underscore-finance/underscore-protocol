# @version 0.4.3

from interfaces import Wallet as wi

MAX_TOKEN_PATH: constant(uint256) = 5
MAX_RECOVER_ASSETS: constant(uint256) = 20

@external
def addLiquidityConcentrated(_nftTokenId: uint256, _pool: address, _tokenA: address, _tokenB: address, _tickLower: int24, _tickUpper: int24, _amountA: uint256, _amountB: uint256, _minAmountA: uint256, _minAmountB: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256, uint256, uint256, uint256):
    ...

@external
def addLiquidity(_pool: address, _tokenA: address, _tokenB: address, _amountA: uint256, _amountB: uint256, _minAmountA: uint256, _minAmountB: uint256, _minLpAmount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (address, uint256, uint256, uint256, uint256):
    ...

@external
def removeLiquidityConcentrated(_nftTokenId: uint256, _pool: address, _tokenA: address, _tokenB: address, _liqToRemove: uint256, _minAmountA: uint256, _minAmountB: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256, uint256, bool, uint256):
    ...

@external
def removeLiquidity(_pool: address, _tokenA: address, _tokenB: address, _lpToken: address, _lpAmount: uint256, _minAmountA: uint256, _minAmountB: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256, uint256, uint256):
    ...

@external
def mintOrRedeemAsset(_tokenIn: address, _tokenOut: address, _tokenInAmount: uint256, _minAmountOut: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256, bool, uint256):
    ...

@external
def swapTokens(_amountIn: uint256, _minAmountOut: uint256, _tokenPath: DynArray[address, MAX_TOKEN_PATH], _poolPath: DynArray[address, MAX_TOKEN_PATH - 1], _recipient: address) -> (uint256, uint256, uint256):
    ...

@external
def depositForYield(_asset: address, _amount: uint256, _vaultAddr: address, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, address, uint256, uint256):
    ...

@external
def withdrawFromYield(_vaultToken: address, _amount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, address, uint256, uint256):
    ...

@external
def confirmMintOrRedeemAsset(_tokenIn: address, _tokenOut: address, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256):
    ...

@external
def borrow(_borrowAsset: address, _amount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256):
    ...

@external
def repayDebt(_paymentAsset: address, _paymentAmount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256):
    ...

@external
def claimRewards(_user: address, _rewardToken: address, _rewardAmount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32) -> (uint256, uint256):
    ...

@external
def removeCollateral(_asset: address, _amount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256):
    ...

@external
def addCollateral(_asset: address, _amount: uint256, _extraAddr: address, _extraVal: uint256, _extraData: bytes32, _recipient: address) -> (uint256, uint256):
    ...

@view
@external
def getAccessForLego(_user: address, _action: wi.ActionType) -> (address, String[64], uint256):
    ...

@view
@external
def hasCapability(_action: wi.ActionType) -> bool:
    ...

@view
@external
def getPricePerShare(_yieldAsset: address) -> uint256:
    ...

@view
@external
def getPrice(_asset: address) -> uint256:
    ...


# LegoAssets.vy


@view
@external
def isLegoAsset(_asset: address) -> bool:
    ...

@view
@external
def getNumLegoAssets() -> uint256:
    ...

@external
def deregisterLegoAsset(_asset: address) -> bool:
    ...

@external
def pause(_shouldPause: bool):
    ...

@external
def recoverFunds(_recipient: address, _asset: address):
    ...

@external
def recoverFundsMany(_recipient: address, _assets: DynArray[address, MAX_RECOVER_ASSETS]):
    ...