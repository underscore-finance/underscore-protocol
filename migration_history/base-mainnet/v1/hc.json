{
  "language": "Vyper",
  "sources": {
    "interfaces/WalletConfigStructs.vyi": {
      "content": "# @version 0.4.3\n\nMAX_CONFIG_ASSETS: constant(uint256) = 40\nMAX_CONFIG_LEGOS: constant(uint256) = 25\nMAX_ALLOWED_PAYEES: constant(uint256) = 40\n\nflag WhitelistAction:\n    ADD_PENDING\n    CONFIRM_WHITELIST\n    CANCEL_WHITELIST\n    REMOVE_WHITELIST\n\nflag BackpackType:\n    WALLET_KERNEL\n    WALLET_SENTINEL\n    WALLET_HIGH_COMMAND\n    WALLET_PAYMASTER\n    WALLET_CHEQUE_BOOK\n    WALLET_MIGRATOR\n\n# payees\n\nstruct PayeeData:\n    numTxsInPeriod: uint256\n    totalUnitsInPeriod: uint256\n    totalUsdValueInPeriod: uint256\n    totalNumTxs: uint256\n    totalUnits: uint256\n    totalUsdValue: uint256\n    lastTxBlock: uint256\n    periodStartBlock: uint256\n\nstruct PayeeSettings:\n    startBlock: uint256\n    expiryBlock: uint256\n    canPull: bool\n    periodLength: uint256\n    maxNumTxsPerPeriod: uint256\n    txCooldownBlocks: uint256\n    failOnZeroPrice: bool\n    primaryAsset: address\n    onlyPrimaryAsset: bool\n    unitLimits: PayeeLimits\n    usdLimits: PayeeLimits\n\nstruct GlobalPayeeSettings:\n    defaultPeriodLength: uint256\n    startDelay: uint256\n    activationLength: uint256\n    maxNumTxsPerPeriod: uint256\n    txCooldownBlocks: uint256\n    failOnZeroPrice: bool\n    usdLimits: PayeeLimits\n    canPayOwner: bool\n    canPull: bool\n\nstruct PayeeLimits:\n    perTxCap: uint256\n    perPeriodCap: uint256\n    lifetimeCap: uint256\n\nstruct PendingPayee:\n    settings: PayeeSettings\n    initiatedBlock: uint256\n    confirmBlock: uint256\n    currentOwner: address\n\nstruct PayeeManagementBundle:\n    owner: address\n    wallet: address\n    isRegisteredPayee: bool\n    isWhitelisted: bool\n    payeeSettings: PayeeSettings\n    globalPayeeSettings: GlobalPayeeSettings\n    timeLock: uint256\n    walletConfig: address\n\nstruct RecipientConfigBundle:\n    isWhitelisted: bool\n    isOwner: bool\n    isPayee: bool\n    config: PayeeSettings\n    globalConfig: GlobalPayeeSettings\n    data: PayeeData\n\nstruct WhitelistConfigBundle:\n    owner: address\n    wallet: address\n    isWhitelisted: bool\n    pendingWhitelist: PendingWhitelist\n    timeLock: uint256\n    walletConfig: address\n    isManager: bool\n    isOwner: bool\n    whitelistPerms: WhitelistPerms\n    globalWhitelistPerms: WhitelistPerms\n\nstruct PendingWhitelist:\n    initiatedBlock: uint256\n    confirmBlock: uint256\n    currentOwner: address\n\n# cheques\n\nstruct Cheque:\n    recipient: address\n    asset: address\n    amount: uint256\n    creationBlock: uint256\n    unlockBlock: uint256\n    expiryBlock: uint256\n    usdValueOnCreation: uint256\n    canManagerPay: bool\n    canBePulled: bool\n    creator: address\n    active: bool\n\nstruct ChequeSettings:\n    maxNumActiveCheques: uint256\n    maxChequeUsdValue: uint256\n    instantUsdThreshold: uint256\n    perPeriodPaidUsdCap: uint256\n    maxNumChequesPaidPerPeriod: uint256\n    payCooldownBlocks: uint256\n    perPeriodCreatedUsdCap: uint256\n    maxNumChequesCreatedPerPeriod: uint256\n    createCooldownBlocks: uint256\n    periodLength: uint256\n    expensiveDelayBlocks: uint256\n    defaultExpiryBlocks: uint256\n    allowedAssets: DynArray[address, MAX_CONFIG_ASSETS]\n    canManagersCreateCheques: bool\n    canManagerPay: bool\n    canBePulled: bool\n\nstruct ChequeData:\n    numChequesPaidInPeriod: uint256\n    totalUsdValuePaidInPeriod: uint256\n    totalNumChequesPaid: uint256\n    totalUsdValuePaid: uint256\n    lastChequePaidBlock: uint256\n    numChequesCreatedInPeriod: uint256\n    totalUsdValueCreatedInPeriod: uint256\n    totalNumChequesCreated: uint256\n    totalUsdValueCreated: uint256\n    lastChequeCreatedBlock: uint256\n    periodStartBlock: uint256\n\nstruct ChequeManagementBundle:\n    wallet: address\n    walletConfig: address\n    owner: address\n    isRecipientOnWhitelist: bool\n    isCreatorManager: bool\n    managerSettings: ManagerSettings\n    chequeSettings: ChequeSettings\n    chequeData: ChequeData\n    isExistingCheque: bool\n    numActiveCheques: uint256\n    timeLock: uint256\n\n# managers\n\nstruct ManagerData:\n    numTxsInPeriod: uint256\n    totalUsdValueInPeriod: uint256\n    totalNumTxs: uint256\n    totalUsdValue: uint256\n    lastTxBlock: uint256\n    periodStartBlock: uint256\n\nstruct ManagerSettings:\n    startBlock: uint256\n    expiryBlock: uint256\n    limits: ManagerLimits\n    legoPerms: LegoPerms\n    whitelistPerms: WhitelistPerms\n    transferPerms: TransferPerms\n    allowedAssets: DynArray[address, MAX_CONFIG_ASSETS]\n    canClaimLoot: bool\n\nstruct GlobalManagerSettings:\n    managerPeriod: uint256\n    startDelay: uint256\n    activationLength: uint256\n    canOwnerManage: bool\n    limits: ManagerLimits\n    legoPerms: LegoPerms\n    whitelistPerms: WhitelistPerms\n    transferPerms: TransferPerms\n    allowedAssets: DynArray[address, MAX_CONFIG_ASSETS]\n\nstruct ManagerLimits:\n    maxUsdValuePerTx: uint256\n    maxUsdValuePerPeriod: uint256\n    maxUsdValueLifetime: uint256\n    maxNumTxsPerPeriod: uint256\n    txCooldownBlocks: uint256\n    failOnZeroPrice: bool\n\nstruct LegoPerms:\n    canManageYield: bool\n    canBuyAndSell: bool\n    canManageDebt: bool\n    canManageLiq: bool\n    canClaimRewards: bool\n    allowedLegos: DynArray[uint256, MAX_CONFIG_LEGOS]\n\nstruct WhitelistPerms:\n    canAddPending: bool\n    canConfirm: bool\n    canCancel: bool\n    canRemove: bool\n\nstruct TransferPerms:\n    canTransfer: bool\n    canCreateCheque: bool\n    canAddPendingPayee: bool\n    allowedPayees: DynArray[address, MAX_ALLOWED_PAYEES]\n\nstruct ManagerConfigBundle:\n    isOwner: bool\n    isManager: bool\n    config: ManagerSettings\n    globalConfig: GlobalManagerSettings\n    data: ManagerData\n    payee: address\n\nstruct ManagerSettingsBundle:\n    owner: address\n    isManager: bool\n    timeLock: uint256\n    walletConfig: address\n    legoBook: address\n    globalManagerSettings: GlobalManagerSettings\n\n# migration\n\nstruct MigrationConfigBundle:\n    owner: address\n    isFrozen: bool\n    numPayees: uint256\n    numWhitelisted: uint256\n    numManagers: uint256\n    startingAgent: address\n    startingAgentIndex: uint256\n    hasPendingOwnerChange: bool\n    groupId: uint256\n",
      "sha256sum": "aadbecb8a18bcc1886a77c580870041e2ca071de3d9af6d31508f610bc715f9d"
    },
    "contracts/core/walletBackpack/HighCommand.vy": {
      "content": "#    \u2513 \u250f  \u2513\u2513   \n#    \u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u254b\n#    \u2517\u253b\u251b\u2517\u253b\u2517\u2517\u2517 \u2517\n#     __  __   __   ______   __  __       ______   ______   __    __   __    __   ______   __   __   _____    \n#    /\\ \\_\\ \\ /\\ \\ /\\  ___\\ /\\ \\_\\ \\     /\\  ___\\ /\\  __ \\ /\\ \"-./  \\ /\\ \"-./  \\ /\\  __ \\ /\\ \"-.\\ \\ /\\  __-.  \n#    \\ \\  __ \\\\ \\ \\\\ \\ \\__ \\\\ \\  __ \\    \\ \\ \\____\\ \\ \\/\\ \\\\ \\ \\-./\\ \\\\ \\ \\-./\\ \\\\ \\  __ \\\\ \\ \\-.  \\\\ \\ \\/\\ \\ \n#     \\ \\_\\ \\_\\\\ \\_\\\\ \\_____\\\\ \\_\\ \\_\\    \\ \\_____\\\\ \\_____\\\\ \\_\\ \\ \\_\\\\ \\_\\ \\ \\_\\\\ \\_\\ \\_\\\\ \\_\\\\\"\\_\\\\ \\____- \n#      \\/_/\\/_/ \\/_/ \\/_____/ \\/_/\\/_/     \\/_____/ \\/_____/ \\/_/  \\/_/ \\/_/  \\/_/ \\/_/\\/_/ \\/_/ \\/_/ \\/____/ \n#                                                                                                \n#     \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n#     \u2551  ** High Command **                                \u2551\n#     \u2551  Manager settings / functionality for user wallets \u2551\n#     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n#\n#     Underscore Protocol License: https://github.com/underscore-finance/underscore-protocol/blob/master/LICENSE.md\n\n# @version 0.4.3\n\nfrom interfaces import WalletConfigStructs as wcs\n\ninterface UserWalletConfig:\n    def updateManager(_manager: address, _config: wcs.ManagerSettings): nonpayable\n    def setGlobalManagerSettings(_config: wcs.GlobalManagerSettings): nonpayable\n    def addManager(_manager: address, _config: wcs.ManagerSettings): nonpayable\n    def managerSettings(_manager: address) -> wcs.ManagerSettings: view\n    def globalManagerSettings() -> wcs.GlobalManagerSettings: view\n    def indexOfManager(_addr: address) -> uint256: view\n    def indexOfPayee(_payee: address) -> uint256: view\n    def removeManager(_manager: address): nonpayable\n    def timeLock() -> uint256: view\n    def owner() -> address: view\n\ninterface Registry:\n    def isValidRegId(_regId: uint256) -> bool: view\n    def getAddr(_regId: uint256) -> address: view\n\ninterface MissionControl:\n    def canPerformSecurityAction(_addr: address) -> bool: view\n\ninterface Ledger:\n    def isUserWallet(_user: address) -> bool: view\n\ninterface UserWallet:\n    def walletConfig() -> address: view\n\nevent GlobalManagerSettingsModified:\n    user: indexed(address)\n    managerPeriod: uint256\n    startDelay: uint256\n    activationLength: uint256\n    canOwnerManage: bool\n    maxUsdValuePerTx: uint256\n    maxUsdValuePerPeriod: uint256\n    maxUsdValueLifetime: uint256\n    maxNumTxsPerPeriod: uint256\n    txCooldownBlocks: uint256\n    failOnZeroPrice: bool\n    canManageYield: bool\n    canBuyAndSell: bool\n    canManageDebt: bool\n    canManageLiq: bool\n    canClaimRewards: bool\n    numAllowedLegos: uint256\n    canAddPendingWhitelist: bool\n    canConfirmWhitelist: bool\n    canCancelWhitelist: bool\n    canRemoveWhitelist: bool\n    canTransfer: bool\n    canCreateCheque: bool\n    canAddPendingPayee: bool\n    numAllowedRecipients: uint256\n    numAllowedAssets: uint256\n\nevent ManagerSettingsModified:\n    user: indexed(address)\n    manager: indexed(address)\n    startBlock: uint256\n    expiryBlock: uint256\n    maxUsdValuePerTx: uint256\n    maxUsdValuePerPeriod: uint256\n    maxUsdValueLifetime: uint256\n    maxNumTxsPerPeriod: uint256\n    txCooldownBlocks: uint256\n    failOnZeroPrice: bool\n    canManageYield: bool\n    canBuyAndSell: bool\n    canManageDebt: bool\n    canManageLiq: bool\n    canClaimRewards: bool\n    numAllowedLegos: uint256\n    canAddPendingWhitelist: bool\n    canConfirmWhitelist: bool\n    canCancelWhitelist: bool\n    canRemoveWhitelist: bool\n    canTransfer: bool\n    canCreateCheque: bool\n    canAddPendingPayee: bool\n    numAllowedRecipients: uint256\n    numAllowedAssets: uint256\n    canClaimLoot: bool\n\nevent ManagerRemoved:\n    user: indexed(address)\n    manager: indexed(address)\n\nevent ManagerActivationLengthAdjusted:\n    user: indexed(address)\n    manager: indexed(address)\n    activationLength: uint256\n    didRestart: bool\n\nUNDY_HQ: public(immutable(address))\nLEDGER_ID: constant(uint256) = 1\nMISSION_CONTROL_ID: constant(uint256) = 2\nLEGO_BOOK_ID: constant(uint256) = 3\n\nMAX_CONFIG_ASSETS: constant(uint256) = 40\nMAX_CONFIG_LEGOS: constant(uint256) = 25\nMAX_ALLOWED_PAYEES: constant(uint256) = 40\n\n# manager validation bounds\nMIN_MANAGER_PERIOD: public(immutable(uint256))\nMAX_MANAGER_PERIOD: public(immutable(uint256))\nMAX_START_DELAY: public(immutable(uint256))\nMIN_ACTIVATION_LENGTH: public(immutable(uint256))\nMAX_ACTIVATION_LENGTH: public(immutable(uint256))\n\n\n@deploy\ndef __init__(\n    _undyHq: address,\n    _minManagerPeriod: uint256,\n    _maxManagerPeriod: uint256,\n    _minActivationLength: uint256,\n    _maxActivationLength: uint256,\n    _maxStartDelay: uint256,\n):\n    assert _undyHq != empty(address) # dev: invalid undy hq\n    UNDY_HQ = _undyHq\n\n    assert _minManagerPeriod != 0 and _minManagerPeriod < _maxManagerPeriod # dev: invalid manager periods\n    MIN_MANAGER_PERIOD = _minManagerPeriod\n    MAX_MANAGER_PERIOD = _maxManagerPeriod\n\n    assert _minActivationLength != 0 and _minActivationLength < _maxActivationLength # dev: invalid activation length\n    MIN_ACTIVATION_LENGTH = _minActivationLength\n    MAX_ACTIVATION_LENGTH = _maxActivationLength\n\n    assert _maxStartDelay != 0 # dev: invalid start delay\n    MAX_START_DELAY = _maxStartDelay\n\n\n####################\n# Manager Settings #\n####################\n\n\n# add manager\n\n\n@external\ndef addManager(\n    _userWallet: address,\n    _manager: address,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n    _startDelay: uint256 = 0,\n    _activationLength: uint256 = 0,\n) -> bool:\n    assert self._isValidUserWallet(_userWallet) # dev: invalid user wallet\n\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    assert msg.sender == config.owner # dev: no perms\n    assert _manager not in [empty(address), config.owner, config.walletConfig, _userWallet] # dev: invalid manager\n\n    isValid: bool = False\n    settings: wcs.ManagerSettings = empty(wcs.ManagerSettings)\n    isValid, settings = self._isValidNewManager(config.isManager, _startDelay, _activationLength, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, _canClaimLoot, config.globalManagerSettings, config.timeLock, config.legoBook, config.walletConfig)\n    assert isValid # dev: invalid manager\n\n    extcall UserWalletConfig(config.walletConfig).addManager(_manager, settings)\n    log ManagerSettingsModified(\n        user = _userWallet,\n        manager = _manager,\n        startBlock = settings.startBlock,\n        expiryBlock = settings.expiryBlock,\n        maxUsdValuePerTx = _limits.maxUsdValuePerTx,\n        maxUsdValuePerPeriod = _limits.maxUsdValuePerPeriod,\n        maxUsdValueLifetime = _limits.maxUsdValueLifetime,\n        maxNumTxsPerPeriod = _limits.maxNumTxsPerPeriod,\n        txCooldownBlocks = _limits.txCooldownBlocks,\n        failOnZeroPrice = _limits.failOnZeroPrice,\n        canManageYield = _legoPerms.canManageYield,\n        canBuyAndSell = _legoPerms.canBuyAndSell,\n        canManageDebt = _legoPerms.canManageDebt,\n        canManageLiq = _legoPerms.canManageLiq,\n        canClaimRewards = _legoPerms.canClaimRewards,\n        numAllowedLegos = len(_legoPerms.allowedLegos),\n        canAddPendingWhitelist = _whitelistPerms.canAddPending,\n        canConfirmWhitelist = _whitelistPerms.canConfirm,\n        canCancelWhitelist = _whitelistPerms.canCancel,\n        canRemoveWhitelist = _whitelistPerms.canRemove,\n        canTransfer = _transferPerms.canTransfer,\n        canCreateCheque = _transferPerms.canCreateCheque,\n        canAddPendingPayee = _transferPerms.canAddPendingPayee,\n        numAllowedRecipients = len(_transferPerms.allowedPayees),\n        numAllowedAssets = len(_allowedAssets),\n        canClaimLoot = _canClaimLoot,\n    )\n    return True\n\n\n# update existing manager\n\n\n@external\ndef updateManager(\n    _userWallet: address,\n    _manager: address,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n) -> bool:\n    assert self._isValidUserWallet(_userWallet) # dev: invalid user wallet\n\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    assert msg.sender == config.owner # dev: no perms\n\n    # validate inputs\n    assert self._validateManagerOnUpdate(config.isManager, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, _canClaimLoot, config.globalManagerSettings.managerPeriod, config.legoBook, config.walletConfig) # dev: invalid settings\n\n    # update config\n    settings: wcs.ManagerSettings = staticcall UserWalletConfig(config.walletConfig).managerSettings(_manager)\n    settings.limits = _limits\n    settings.legoPerms = _legoPerms\n    settings.whitelistPerms = _whitelistPerms\n    settings.transferPerms = _transferPerms\n    settings.allowedAssets = _allowedAssets\n    settings.canClaimLoot = _canClaimLoot\n    extcall UserWalletConfig(config.walletConfig).updateManager(_manager, settings)\n\n    log ManagerSettingsModified(\n        user = _userWallet,\n        manager = _manager,\n        startBlock = settings.startBlock,\n        expiryBlock = settings.expiryBlock,\n        maxUsdValuePerTx = _limits.maxUsdValuePerTx,\n        maxUsdValuePerPeriod = _limits.maxUsdValuePerPeriod,\n        maxUsdValueLifetime = _limits.maxUsdValueLifetime,\n        maxNumTxsPerPeriod = _limits.maxNumTxsPerPeriod,\n        txCooldownBlocks = _limits.txCooldownBlocks,\n        failOnZeroPrice = _limits.failOnZeroPrice,\n        canManageYield = _legoPerms.canManageYield,\n        canBuyAndSell = _legoPerms.canBuyAndSell,\n        canManageDebt = _legoPerms.canManageDebt,\n        canManageLiq = _legoPerms.canManageLiq,\n        canClaimRewards = _legoPerms.canClaimRewards,\n        numAllowedLegos = len(_legoPerms.allowedLegos),\n        canAddPendingWhitelist = _whitelistPerms.canAddPending,\n        canConfirmWhitelist = _whitelistPerms.canConfirm,\n        canCancelWhitelist = _whitelistPerms.canCancel,\n        canRemoveWhitelist = _whitelistPerms.canRemove,\n        canTransfer = _transferPerms.canTransfer,\n        canCreateCheque = _transferPerms.canCreateCheque,\n        canAddPendingPayee = _transferPerms.canAddPendingPayee,\n        numAllowedRecipients = len(_transferPerms.allowedPayees),\n        numAllowedAssets = len(_allowedAssets),\n        canClaimLoot = _canClaimLoot,\n    )\n    return True\n\n\n# remove manager\n\n\n@external\ndef removeManager(_userWallet: address, _manager: address) -> bool:\n    assert self._isValidUserWallet(_userWallet) # dev: invalid user wallet\n\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    if msg.sender not in [config.owner, _manager]:\n        assert self._canPerformSecurityAction(msg.sender) # dev: no perms\n    assert config.isManager # dev: manager not found\n\n    extcall UserWalletConfig(config.walletConfig).removeManager(_manager)\n    log ManagerRemoved(user = _userWallet, manager = _manager)\n    return True\n\n\n# adjust activation length\n\n\n@external\ndef adjustManagerActivationLength(\n    _userWallet: address,\n    _manager: address,\n    _activationLength: uint256,\n    _shouldResetStartBlock: bool = False,\n) -> bool:\n    assert self._isValidUserWallet(_userWallet) # dev: invalid user wallet\n\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    assert msg.sender == config.owner # dev: no perms\n    assert config.isManager # dev: no manager found\n\n    # validation\n    settings: wcs.ManagerSettings = staticcall UserWalletConfig(config.walletConfig).managerSettings(_manager)\n    assert settings.startBlock < block.number # dev: manager not active yet\n    assert self._validateActivationLength(_activationLength) # dev: invalid activation length\n\n    # update config\n    didRestart: bool = False\n    if _shouldResetStartBlock or settings.expiryBlock < block.number:\n        settings.startBlock = block.number\n        didRestart = True\n\n    settings.expiryBlock = settings.startBlock + _activationLength\n    assert settings.expiryBlock > block.number # dev: invalid expiry block\n    extcall UserWalletConfig(config.walletConfig).updateManager(_manager, settings)\n\n    log ManagerActivationLengthAdjusted(\n        user = _userWallet,\n        manager = _manager,\n        activationLength = _activationLength,\n        didRestart = didRestart,\n    )\n    return True\n\n\n###########################\n# Global Manager Settings #\n###########################\n\n\n@external\ndef setGlobalManagerSettings(\n    _userWallet: address,\n    _managerPeriod: uint256,\n    _startDelay: uint256,\n    _activationLength: uint256,\n    _canOwnerManage: bool,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n) -> bool:\n    assert self._isValidUserWallet(_userWallet) # dev: invalid user wallet\n\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, empty(address))\n    assert msg.sender == config.owner # dev: no perms\n\n    # validate inputs\n    assert self._validateGlobalManagerSettings(_managerPeriod, _startDelay, _activationLength, _canOwnerManage, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, config.timeLock, config.legoBook, config.walletConfig) # dev: invalid settings\n\n    # update config\n    settings: wcs.GlobalManagerSettings = wcs.GlobalManagerSettings(\n        managerPeriod = _managerPeriod,\n        startDelay = _startDelay,\n        activationLength = _activationLength,\n        canOwnerManage = _canOwnerManage,\n        limits = _limits,\n        legoPerms = _legoPerms,\n        whitelistPerms = _whitelistPerms,\n        transferPerms = _transferPerms,\n        allowedAssets = _allowedAssets,\n    )\n    extcall UserWalletConfig(config.walletConfig).setGlobalManagerSettings(settings)\n\n    log GlobalManagerSettingsModified(\n        user = _userWallet,\n        managerPeriod = _managerPeriod,\n        startDelay = _startDelay,\n        activationLength = _activationLength,\n        canOwnerManage = _canOwnerManage,\n        maxUsdValuePerTx = _limits.maxUsdValuePerTx,\n        maxUsdValuePerPeriod = _limits.maxUsdValuePerPeriod,\n        maxUsdValueLifetime = _limits.maxUsdValueLifetime,\n        maxNumTxsPerPeriod = _limits.maxNumTxsPerPeriod,\n        txCooldownBlocks = _limits.txCooldownBlocks,\n        failOnZeroPrice = _limits.failOnZeroPrice,\n        canManageYield = _legoPerms.canManageYield,\n        canBuyAndSell = _legoPerms.canBuyAndSell,\n        canManageDebt = _legoPerms.canManageDebt,\n        canManageLiq = _legoPerms.canManageLiq,\n        canClaimRewards = _legoPerms.canClaimRewards,\n        numAllowedLegos = len(_legoPerms.allowedLegos),\n        canAddPendingWhitelist = _whitelistPerms.canAddPending,\n        canConfirmWhitelist = _whitelistPerms.canConfirm,\n        canCancelWhitelist = _whitelistPerms.canCancel,\n        canRemoveWhitelist = _whitelistPerms.canRemove,\n        canTransfer = _transferPerms.canTransfer,\n        canCreateCheque = _transferPerms.canCreateCheque,\n        canAddPendingPayee = _transferPerms.canAddPendingPayee,\n        numAllowedRecipients = len(_transferPerms.allowedPayees),\n        numAllowedAssets = len(_allowedAssets),\n    )\n    return True\n\n\n######################\n# Manager Validation #\n######################\n\n\n# validate on add new\n\n\n@view\n@external\ndef isValidNewManager(\n    _userWallet: address,\n    _manager: address,\n    _startDelay: uint256,\n    _activationLength: uint256,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n) -> bool:\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    isValid: bool = False\n    na: wcs.ManagerSettings = empty(wcs.ManagerSettings)\n    isValid, na = self._isValidNewManager(config.isManager, _startDelay, _activationLength, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, _canClaimLoot, config.globalManagerSettings, config.timeLock, config.legoBook, config.walletConfig)\n    return isValid\n\n\n@view\n@internal\ndef _isValidNewManager(\n    _isManager: bool,\n    _startDelay: uint256,\n    _activationLength: uint256,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n    _globalConfig: wcs.GlobalManagerSettings,\n    _currentTimeLock: uint256,\n    _legoBookAddr: address,\n    _walletConfig: address,\n) -> (bool, wcs.ManagerSettings):\n\n    # already a manager\n    if _isManager:\n        return False, empty(wcs.ManagerSettings)\n\n    # start delay\n    startDelay: uint256 = max(_globalConfig.startDelay, _currentTimeLock)\n    if _startDelay != 0:\n        startDelay = max(startDelay, _startDelay) # using max here as extra protection\n\n    # activation length\n    activationLength: uint256 = _globalConfig.activationLength\n    if _activationLength != 0:\n        activationLength = min(activationLength, _activationLength)\n\n    # start delay\n    if not self._validateStartDelay(startDelay, _currentTimeLock):\n        return False, empty(wcs.ManagerSettings)\n\n    # activation length\n    if not self._validateActivationLength(activationLength):\n        return False, empty(wcs.ManagerSettings)\n\n    # validate limits\n    if not self._validateManagerLimits(_limits, _globalConfig.managerPeriod):\n        return False, empty(wcs.ManagerSettings)\n\n    # validate lego perms\n    if not self._validateLegoPerms(_legoPerms, _legoBookAddr):\n        return False, empty(wcs.ManagerSettings)\n\n    # validate transfer perms\n    if not self._validateTransferPerms(_transferPerms, _walletConfig):\n        return False, empty(wcs.ManagerSettings)\n\n    # validate allowed assets\n    if not self._validateAllowedAssets(_allowedAssets):\n        return False, empty(wcs.ManagerSettings)\n\n    # create settings\n    settings: wcs.ManagerSettings = wcs.ManagerSettings(\n        startBlock = block.number + startDelay,\n        expiryBlock = block.number + startDelay + activationLength,\n        limits = _limits,\n        legoPerms = _legoPerms,\n        whitelistPerms = _whitelistPerms,\n        transferPerms = _transferPerms,\n        allowedAssets = _allowedAssets,\n        canClaimLoot = _canClaimLoot,\n    )\n    return True, settings\n\n\n# validate on update\n\n\n@view\n@external\ndef validateManagerOnUpdate(\n    _userWallet: address,\n    _manager: address,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n) -> bool:\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, _manager)\n    return self._validateManagerOnUpdate(config.isManager, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, _canClaimLoot, config.globalManagerSettings.managerPeriod, config.legoBook, config.walletConfig)\n\n\n@view\n@internal\ndef _validateManagerOnUpdate(\n    _isManager: bool,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _canClaimLoot: bool,\n    _managerPeriod: uint256,\n    _legoBookAddr: address,\n    _walletConfig: address,\n) -> bool:\n    # must already be a manager\n    if not _isManager:\n        return False\n\n    # validate limits\n    if not self._validateManagerLimits(_limits, _managerPeriod):\n        return False\n\n    # validate lego perms\n    if not self._validateLegoPerms(_legoPerms, _legoBookAddr):\n        return False\n\n    # validate transfer perms\n    if not self._validateTransferPerms(_transferPerms, _walletConfig):\n        return False\n\n    # validate allowed assets\n    if not self._validateAllowedAssets(_allowedAssets):\n        return False\n\n    return True\n\n\n# validate global manager settings\n\n\n@view\n@external\ndef validateGlobalManagerSettings(\n    _userWallet: address,\n    _managerPeriod: uint256,\n    _startDelay: uint256,\n    _activationLength: uint256,\n    _canOwnerManage: bool,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n) -> bool:\n    config: wcs.ManagerSettingsBundle = self._getManagerSettingsBundle(_userWallet, empty(address))\n    return self._validateGlobalManagerSettings(_managerPeriod, _startDelay, _activationLength, _canOwnerManage, _limits, _legoPerms, _whitelistPerms, _transferPerms, _allowedAssets, config.timeLock, config.legoBook, config.walletConfig)\n\n\n@view\n@internal\ndef _validateGlobalManagerSettings(\n    _managerPeriod: uint256,\n    _startDelay: uint256,\n    _activationLength: uint256,\n    _canOwnerManage: bool,\n    _limits: wcs.ManagerLimits,\n    _legoPerms: wcs.LegoPerms,\n    _whitelistPerms: wcs.WhitelistPerms,\n    _transferPerms: wcs.TransferPerms,\n    _allowedAssets: DynArray[address, MAX_CONFIG_ASSETS],\n    _currentTimeLock: uint256,\n    _legoBookAddr: address,\n    _walletConfig: address,\n) -> bool:\n\n    # manager period\n    if not self._validateManagerPeriod(_managerPeriod):\n        return False\n\n    # default start delay\n    if not self._validateStartDelay(_startDelay, _currentTimeLock):\n        return False\n\n    # default activation length\n    if not self._validateActivationLength(_activationLength):\n        return False\n\n    # validate limits\n    if not self._validateManagerLimits(_limits, _managerPeriod):\n        return False\n\n    # validate lego perms\n    if not self._validateLegoPerms(_legoPerms, _legoBookAddr):\n        return False\n\n    # validate transfer perms\n    if not self._validateTransferPerms(_transferPerms, _walletConfig):\n        return False\n\n    # validate allowed assets\n    if not self._validateAllowedAssets(_allowedAssets):\n        return False\n\n    return True\n\n\n############################\n# Manager Validation Utils #\n############################\n\n\n@view\n@internal\ndef _validateManagerPeriod(_managerPeriod: uint256) -> bool:\n    return _managerPeriod >= MIN_MANAGER_PERIOD and _managerPeriod <= MAX_MANAGER_PERIOD\n\n\n@view\n@internal\ndef _validateStartDelay(_startDelay: uint256, _currentTimeLock: uint256) -> bool:\n    return _startDelay <= MAX_START_DELAY and _startDelay >= _currentTimeLock\n\n\n@view\n@internal\ndef _validateActivationLength(_activationLength: uint256) -> bool:\n    return _activationLength >= MIN_ACTIVATION_LENGTH and _activationLength <= MAX_ACTIVATION_LENGTH\n\n\n@pure\n@internal\ndef _validateManagerLimits(_limits: wcs.ManagerLimits, _managerPeriod: uint256) -> bool:\n    # NOTE: 0 values are treated as \"unlimited\" throughout this validation\n\n    # validate if both values are non-zero (not unlimited)\n    if _limits.maxUsdValuePerTx != 0 and _limits.maxUsdValuePerPeriod != 0:\n        if _limits.maxUsdValuePerTx > _limits.maxUsdValuePerPeriod:\n            return False\n\n    # validate per-period is not less than lifetime (when both are set)\n    if _limits.maxUsdValuePerPeriod != 0 and _limits.maxUsdValueLifetime != 0:\n        if _limits.maxUsdValuePerPeriod > _limits.maxUsdValueLifetime:\n            return False\n\n    # cooldown cannot exceed period length (unless cooldown is 0 = no cooldown)\n    if _limits.txCooldownBlocks != 0 and _limits.txCooldownBlocks > _managerPeriod:\n        return False\n\n    return True\n\n\n@view\n@internal\ndef _validateLegoPerms(_legoPerms: wcs.LegoPerms, _legoBookAddr: address) -> bool:\n    if len(_legoPerms.allowedLegos) == 0:\n        return True\n\n    canDoAnything: bool = (_legoPerms.canManageYield or \n                          _legoPerms.canBuyAndSell or \n                          _legoPerms.canManageDebt or \n                          _legoPerms.canManageLiq or \n                          _legoPerms.canClaimRewards)\n\n    # allowedLegos should be empty if there are no permissions\n    if not canDoAnything:\n        return False\n\n    # validate lego book address\n    if _legoBookAddr == empty(address):\n        return False\n\n    # check for duplicates and validate each lego ID\n    checkedLegos: DynArray[uint256, MAX_CONFIG_LEGOS] = []\n    for legoId: uint256 in _legoPerms.allowedLegos:\n        if not staticcall Registry(_legoBookAddr).isValidRegId(legoId):\n            return False\n        if legoId in checkedLegos:\n            return False\n        checkedLegos.append(legoId)\n\n    return True\n\n\n@view\n@internal\ndef _validateTransferPerms(_transferPerms: wcs.TransferPerms, _walletConfig: address) -> bool:\n    if len(_transferPerms.allowedPayees) == 0:\n        return True\n\n    # canTransfer should be True if there are allowed payees\n    if not _transferPerms.canTransfer:\n        return False\n\n    # validate each payee\n    checkedPayees: DynArray[address, MAX_ALLOWED_PAYEES] = []\n    for payee: address in _transferPerms.allowedPayees:\n        if payee == empty(address):\n            return False\n\n        # check if payee is valid\n        if staticcall UserWalletConfig(_walletConfig).indexOfPayee(payee) == 0:\n            return False\n\n        # check for duplicates\n        if payee in checkedPayees:\n            return False\n\n        checkedPayees.append(payee)\n\n    return True\n\n\n@pure\n@internal\ndef _validateAllowedAssets(_allowedAssets: DynArray[address, MAX_CONFIG_ASSETS]) -> bool:\n    if len(_allowedAssets) == 0:\n        return True\n\n    checkedAssets: DynArray[address, MAX_CONFIG_ASSETS] = []\n    for asset: address in _allowedAssets:\n        if asset == empty(address):\n            return False\n\n        # check for duplicates\n        if asset in checkedAssets:\n            return False\n        checkedAssets.append(asset)\n\n    return True\n\n\n###################\n# Wallet Defaults #\n###################\n\n\n# global manager settings\n\n\n@view\n@external\ndef createDefaultGlobalManagerSettings(\n    _managerPeriod: uint256,\n    _minTimeLock: uint256,\n    _defaultActivationLength: uint256,\n) -> wcs.GlobalManagerSettings:\n    config: wcs.GlobalManagerSettings = empty(wcs.GlobalManagerSettings)\n    config.managerPeriod = _managerPeriod\n    config.startDelay = _minTimeLock\n    config.activationLength = _defaultActivationLength\n    config.canOwnerManage = True\n    config.legoPerms, config.whitelistPerms, config.transferPerms = self._createHappyManagerDefaults()\n    return config\n\n\n# starter agent settings\n\n\n@view\n@external\ndef createStarterAgentSettings(_startingAgentActivationLength: uint256) -> wcs.ManagerSettings:\n    config: wcs.ManagerSettings = wcs.ManagerSettings(\n        startBlock = block.number,\n        expiryBlock = block.number + _startingAgentActivationLength,\n        limits = empty(wcs.ManagerLimits),\n        legoPerms = empty(wcs.LegoPerms),\n        whitelistPerms = empty(wcs.WhitelistPerms),\n        transferPerms = empty(wcs.TransferPerms),\n        allowedAssets = [],\n        canClaimLoot = True,\n    )\n    config.legoPerms, config.whitelistPerms, config.transferPerms = self._createHappyManagerDefaults()\n    return config\n\n\n# happy defaults\n\n\n@pure\n@internal\ndef _createHappyManagerDefaults() -> (wcs.LegoPerms, wcs.WhitelistPerms, wcs.TransferPerms):\n    return wcs.LegoPerms(\n        canManageYield = True,\n        canBuyAndSell = True,\n        canManageDebt = True,\n        canManageLiq = True,\n        canClaimRewards = True,\n        allowedLegos = [],\n    ), wcs.WhitelistPerms(\n        canAddPending = False,\n        canConfirm = True,\n        canCancel = True,\n        canRemove = False,\n    ), wcs.TransferPerms(\n        canTransfer = True,\n        canCreateCheque = True,\n        canAddPendingPayee = True,\n        allowedPayees = [],\n    )\n\n\n#############\n# Utilities #\n#############\n\n\n# is valid user wallet\n\n\n@view\n@internal\ndef _isValidUserWallet(_userWallet: address) -> bool:\n    ledger: address = staticcall Registry(UNDY_HQ).getAddr(LEDGER_ID)\n    return staticcall Ledger(ledger).isUserWallet(_userWallet)\n\n\n# can perform security action\n\n\n@view\n@internal\ndef _canPerformSecurityAction(_addr: address) -> bool:\n    missionControl: address = staticcall Registry(UNDY_HQ).getAddr(MISSION_CONTROL_ID)\n    if missionControl == empty(address):\n        return False\n    return staticcall MissionControl(missionControl).canPerformSecurityAction(_addr)\n\n\n# manager settings bundle\n\n\n@view\n@external\ndef getManagerSettingsBundle(_userWallet: address, _manager: address) -> wcs.ManagerSettingsBundle:\n    return self._getManagerSettingsBundle(_userWallet, _manager)\n\n\n@view\n@internal\ndef _getManagerSettingsBundle(_userWallet: address, _manager: address) -> wcs.ManagerSettingsBundle:\n    walletConfig: address = staticcall UserWallet(_userWallet).walletConfig()\n    return wcs.ManagerSettingsBundle(\n        owner = staticcall UserWalletConfig(walletConfig).owner(),\n        isManager = staticcall UserWalletConfig(walletConfig).indexOfManager(_manager) != 0,\n        timeLock = staticcall UserWalletConfig(walletConfig).timeLock(),\n        walletConfig = walletConfig,\n        legoBook = staticcall Registry(UNDY_HQ).getAddr(LEGO_BOOK_ID),\n        globalManagerSettings = staticcall UserWalletConfig(walletConfig).globalManagerSettings(),\n    )\n",
      "sha256sum": "f77813b32e2eb4d54a14936bc003a79b8e1c6af43c3e430aafc9e4634ff1a01e"
    }
  },
  "settings": {
    "outputSelection": {
      "contracts/core/walletBackpack/HighCommand.vy": [
        "*"
      ]
    },
    "search_paths": [
      "."
    ]
  },
  "compiler_version": "v0.4.3+commit.bff19ea2",
  "integrity": "8f0e6e3b8f00419cb8b82da7812f9d513aaa3ef3587e0b721fcc670bca21057a"
}